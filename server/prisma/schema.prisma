// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  username String
  password String
  createdAt DateTime @default(now())
  profile Profile?

  requestSender FollowRequest[] @relation("requestSender")
  requestReceiver FollowRequest[] @relation("requestReceiver")

  followers Follow[] @relation("Followers")
  follows Follow[] @relation("Follows")

  
  chats ChatParticipant[]
  messages Message[]
  posts Post[]
  likes Like[]
  comments Comment[]
}

model Profile {
  id String @id @default(uuid())

  user User @relation(fields: [userId], references: [id])
  userId String @unique

  name String? @default("New User")
  bio String? @default("no bio.")
  birthday DateTime?
}

model FollowRequest {
  id String @id @default(uuid())
  
  sender User @relation("requestSender", fields: [senderId], references: [id])
  senderId String

  receiver User @relation("requestReceiver", fields: [receiverId], references: [id])
  receiverId String

  status RequestStatus @default(PENDING)

  @@unique([senderId, receiverId])
}

model Follow {
  id String @id @default(uuid())

  follower User @relation("Follows", fields: [followerId], references: [id])
  followerId String

  following User @relation("Followers", fields: [followingId], references: [id])
  followingId String

  @@unique([followerId, followingId])
}

model Post {
  id String @id @default(uuid())

  user User @relation(fields: [userId], references: [id])
  userId String

  text String
  likes Like[]
  comments Comment[]

  createdAt DateTime @default(now())
}

model Like {
  id String @id @default(uuid())

  user User @relation(fields: [userId], references: [id])
  userId String

  post Post @relation(fields: [postId], references: [id])
  postId String

  @@unique([userId, postId])
}

model Comment {
  id String @id @default(uuid())

  user User @relation(fields: [userId], references: [id])
  userId String

  post Post @relation(fields: [postId], references: [id])
  postId String

  text String
  createdAt DateTime @default(now())
}

model Chat {
  id String @id @default(uuid())

  participants ChatParticipant[]
  messages Message[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChatParticipant {
  id String @id @default(uuid())

  user User @relation(fields: [userId], references: [id])
  userId String

  chat Chat @relation(fields: [chatId], references: [id])
  chatId String

  @@unique([userId, chatId])
}

model Message {
  id String @id @default(uuid())

  user User @relation(fields: [userId], references: [id])
  userId String

  chat Chat @relation(fields: [chatId], references: [id])
  chatId String

  text String
  createdAt DateTime @default(now())
}

model Session {
  id String @id @default(uuid())
  sid  String @unique
  data String
  expiresAt DateTime
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}